---
apiVersion: container-use/v1alpha1
kind: EnvironmentConfig
metadata:
  name: crossplane-development
  description: "Stuttgart-Things Crossplane Configuration Development Environment"
  labels:
    project: "stuttgart-things"
    category: "crossplane"
    type: "development"
    unified-standards: "v1.0.0"
spec:
  # Base container image aligned with Stuttgart-Things standards
  baseImage: "ghcr.io/stuttgart-things/sthings-alpine:1.2024.10"

  # Working directory inside the container
  workdir: "/workdir"

  # Environment variables
  environment:
    - name: "DEBIAN_FRONTEND"
      value: "noninteractive"
    - name: "KUBECONFIG"
      value: "/workdir/.kube/config"
    - name: "CROSSPLANE_CLI_VERSION"
      value: "v1.20.0"
    - name: "KUBECTL_VERSION"
      value: "v1.31.0"
    - name: "HELM_VERSION"
      value: "v3.16.0"
    - name: "YQ_VERSION"
      value: "v4.44.3"
    - name: "KCL_VERSION"
      value: "v0.11.3"
    - name: "GO_VERSION"
      value: "1.23"
    - name: "GOPATH"
      value: "/workdir/go"
    - name: "GOROOT"
      value: "/usr/lib/go"
    - name: "PATH"
      value: "/usr/local/bin:/usr/bin:/bin:/workdir/go/bin:/usr/lib/go/bin"

  # Setup commands executed during container initialization
  setupCommands:
    # Alpine packages with Python for pre-commit
    - "apk add --no-cache curl git wget jq vim nano ca-certificates gnupg unzip bash docker-cli yq python3 py3-pip python3-dev gcc musl-dev"

    # Install Crossplane CLI
    - "curl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh\" | sh && mv crossplane /usr/local/bin/"

    # Install kubectl
    - "curl -LO \"https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl\""
    - "chmod +x kubectl && mv kubectl /usr/local/bin/"

    # Install Helm
    - "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
    - "chmod 700 get_helm.sh && ./get_helm.sh --version ${HELM_VERSION} && rm get_helm.sh"

    # Install KCL
    - "curl -fsSL https://kcl-lang.io/script/install-kcl.sh | bash"
    - "ln -sf /root/.kcl/bin/kcl /usr/local/bin/kcl"

    # Install pre-commit for code quality
    - "pip3 install pre-commit detect-secrets"

    # Install Go for function-go-templating development
    - "apk add --no-cache go"

    # Install task runner (go-task) for Taskfile execution
    - "curl -sL https://taskfile.dev/install.sh | sh && mv bin/task /usr/local/bin/"

    # Create directories
    - "mkdir -p /workdir/.kube"
    - "mkdir -p /workdir/tmp"
    - "mkdir -p /workdir/go/bin"
    - "mkdir -p /workdir/go/src"
    - "mkdir -p /workdir/go/pkg"

    # Git configuration aligned with Stuttgart-Things standards
    - "git config --global user.name 'Stuttgart-Things Container User'"
    - "git config --global user.email 'container@stuttgart-things.com'"
    - "git config --global init.defaultBranch main"
    - "git config --global pull.rebase false"

    # Setup pre-commit in the repository
    - "cd /workdir && if [ -f .pre-commit-config.yaml ]; then pre-commit install; fi"

  # Services to run alongside the development environment
  services:
    # Docker-in-Docker for Crossplane function runtime
    - name: "docker"
      image: "docker:dind"
      environment:
        - "DOCKER_TLS_CERTDIR="
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
      privileged: true

  # Development tools and aliases
  aliases:
    # Crossplane shortcuts
    - name: "xp"
      command: "crossplane"
    - name: "xp-render"
      command: "crossplane render"
    - name: "xp-build"
      command: "crossplane xpkg build"
    - name: "xp-push"
      command: "crossplane xpkg push"

    # Function-go-templating specific
    - name: "xp-test-template"
      command: "crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml --include-function-results"
    - name: "xp-validate"
      command: "crossplane xpkg build --verbose"

    # Kubectl shortcuts
    - name: "k"
      command: "kubectl"
    - name: "kg"
      command: "kubectl get"
    - name: "kd"
      command: "kubectl describe"

    # Pre-commit and quality shortcuts
    - name: "pc"
      command: "pre-commit"
    - name: "pc-run"
      command: "pre-commit run --all-files"
    - name: "pc-install"
      command: "pre-commit install"

    # Task runner shortcuts
    - name: "t"
      command: "task"
    - name: "tc"
      command: "task commit"
    - name: "tcheck"
      command: "task check"
    - name: "ka"
      command: "kubectl apply"

    # Stuttgart-Things development shortcuts aligned with unified standards
    - name: "cu-test-vault-config"
      command: "cd /workdir/configurations/config/vault-config && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml"
    - name: "cu-test-vault-auth"
      command: "cd /workdir/configurations/config/vault-auth && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml --include-function-results"
    - name: "cu-test-vcluster"
      command: "cd /workdir/configurations/apps/vcluster && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml"
    - name: "cu-test-ansible-run"
      command: "cd /workdir/configurations/apps/ansible-run && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml"
    - name: "cu-test-all"
      command: "echo 'Testing all configurations...' && for config in /workdir/configurations/*/*/; do echo \"Testing $config\"; cd \"$config\" && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml; done"

    # Quality and pre-commit tasks
    - name: "cu-check"
      command: "cd /workdir && task check"
    - name: "cu-commit"
      command: "cd /workdir && task commit"
    - name: "cu-pr"
      command: "cd /workdir && task pr"

  # Files to be created/copied during initialization
  files:
    - path: "/workdir/.bashrc_custom"
      content: |
        # Custom bash configuration for Crossplane development

        # Aliases
        alias ll='ls -la'
        alias la='ls -la'
        alias l='ls -CF'
        alias ..='cd ..'
        alias ...='cd ../..'

        # Crossplane specific aliases
        alias xp='crossplane'
        alias xp-render='crossplane render'
        alias xp-build='crossplane xpkg build'
        alias xp-push='crossplane xpkg push'

        # Function-go-templating specific
        alias xp-test='crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml --include-function-results'
        alias xp-validate='crossplane xpkg build --verbose'

        # Kubectl aliases
        alias k='kubectl'
        alias kg='kubectl get'
        alias kd='kubectl describe'
        alias ka='kubectl apply'

        # Pre-commit and quality
        alias pc='pre-commit'
        alias pc-run='pre-commit run --all-files'
        alias pc-install='pre-commit install'

        # Task runner aliases
        alias t='task'
        alias tc='task commit'
        alias tcheck='task check'

        # Go environment
        export GOPATH=/workdir/go
        export GOROOT=/usr/lib/go
        export PATH=$PATH:$GOPATH/bin:$GOROOT/bin

        # Stuttgart-Things specific shortcuts
        alias cu-test-vault-auth='cd /workdir/configurations/config/vault-auth && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml --include-function-results'
        alias cu-check='cd /workdir && task check'
        alias cu-commit='cd /workdir && task commit'

        # Function to quickly test a specific configuration
        test-config() {
          if [ -z "$1" ]; then
            echo "Usage: test-config <config-path>"
            echo "Example: test-config configurations/config/vault-auth"
            return 1
          fi
          cd "/workdir/$1" && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml --include-function-results
        }

        # Git aliases
        alias gs='git status'
        alias ga='git add'
        alias gc='git commit'
        alias gp='git push'
        alias gl='git log --oneline'

        # Stuttgart-Things unified development shortcuts
        alias cu-test-vault-config='cd /workdir/configurations/config/vault-config && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml'
        alias cu-test-vcluster='cd /workdir/configurations/apps/vcluster && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml'
        alias cu-test-ansible-run='cd /workdir/configurations/apps/ansible-run && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml'
        alias cu-test-all='echo "Testing all configurations..." && for config in /workdir/configurations/*/*/; do echo "Testing $config"; cd "$config" && crossplane render examples/claim.yaml apis/composition.yaml examples/functions.yaml; done'

        # Stuttgart-Things standards shortcuts
        alias show-decisions='echo "ðŸ“‹ Stuttgart-Things Development Decisions:" && less /workdir/.container-use/decisions-unified.md'
        alias show-tasks='echo "ðŸ“‹ Stuttgart-Things Development Tasks:" && less /workdir/.container-use/tasks-unified.md'
        alias show-standards='echo "ðŸ“‹ Stuttgart-Things Code Standards:" && less /workdir/.container-use/standards.md'

        # Prompt customization for Stuttgart-Things
        export PS1='\[\033[01;32m\]stuttgart-things-crossplane\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

        # Load custom bashrc
        if [ -f /workdir/.bashrc_custom ]; then
            source /workdir/.bashrc_custom
        fi
  documentation:
    description: |
      Stuttgart-Things Crossplane Development Environment with unified standards compliance.

      This environment includes:
      - Crossplane CLI for testing and building configurations
      - Docker support for KCL function runtime
      - kubectl for Kubernetes cluster interaction
      - Helm for chart management
      - yq for YAML processing
      - KCL for configuration language development

      ## Stuttgart-Things Unified Standards:

      ```bash
      # View organizational standards
      show-decisions           # View development decisions
      show-tasks              # View development task workflow
      show-standards          # View code standards and conventions

      # Test configurations (unified command pattern)
      cu-test-vault-config    # Test Vault Config configuration
      cu-test-vcluster        # Test VCluster configuration
      cu-test-ansible-run     # Test Ansible-Run configuration
      cu-test-all            # Test all configurations

      # Build packages
      xp-build --package-root=configurations/{category}/{name}

      # Render configurations
      xp-render examples/claim.yaml apis/composition.yaml examples/functions.yaml
      ```      ## Directory Structure:

      - `/workdir/configurations/` - Crossplane configurations
      - `/workdir/tests/` - Test files and examples
      - `/workdir/.kube/` - Kubernetes configuration
      - `/workdir/tmp/` - Temporary files

      ## Installed Tools:

      - Crossplane CLI: $CROSSPLANE_CLI_VERSION
      - kubectl: $KUBECTL_VERSION
      - Helm: $HELM_VERSION
      - yq: $YQ_VERSION
      - KCL: $KCL_VERSION
      - Docker CE (for function runtime)

    examples:
      - title: "Test Vault Config Configuration"
        description: "Render and validate the Vault Config configuration"
        command: "cu-test-vault-config"

      - title: "Test VCluster Configuration"
        description: "Render and validate the VCluster configuration"
        command: "cu-test-vcluster"

      - title: "Test All Configurations"
        description: "Test all available Crossplane configurations"
        command: "cu-test-all"

      - title: "Build Crossplane Package"
        description: "Build a crossplane package from configuration"
        command: "crossplane xpkg build --package-root=configurations/{category}/{name} --examples-root=configurations/{category}/{name}/examples"

      - title: "Validate YAML Files"
        description: "Check YAML syntax and structure"
        command: "find configurations -name '*.yaml' -exec yq e . {} \\;"

      - title: "Check Stuttgart-Things Standards"
        description: "View organizational development standards"
        command: "show-standards"

  # Health checks and validation
  healthChecks:
    - name: "crossplane-cli"
      command: "crossplane version"
      expectedOutput: "v1.20.0"

    - name: "kubectl"
      command: "kubectl version --client"
      expectedOutput: "v1.31.0"

    - name: "helm"
      command: "helm version"
      expectedOutput: "v3.16.0"

    - name: "yq"
      command: "yq --version"
      expectedOutput: "v4.44.3"

    - name: "kcl"
      command: "kcl version"
      expectedOutput: "v0.11.3"

    - name: "docker"
      command: "docker --version"
      expectedOutput: "Docker version"

  # Resource limits
  resources:
    limits:
      memory: "4Gi"
      cpu: "2"
    requests:
      memory: "2Gi"
      cpu: "1"

  # Ports to expose for development
  ports:
    - containerPort: 8080
      description: "Development server"
    - containerPort: 9443
      description: "Crossplane webhook"

  # Volume mounts for persistent development
  volumes:
    - name: "kube-config"
      mountPath: "/workdir/.kube"
      description: "Kubernetes configuration directory"
    - name: "docker-socket"
      mountPath: "/var/run/docker.sock"
      description: "Docker socket for container builds"
